-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;

CREATE TABLE IF NOT EXISTS public.user
(
    id bigserial NOT NULL,
    first_name character varying(100) NOT NULL,
    last_name character varying(100) NOT NULL,
    email character varying(150) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.dealership
(
    id bigserial NOT NULL,
    dealership_name character varying(100) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.review
(
    id bigserial NOT NULL,
    review character varying(250) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.addressregion
(
    id bigserial NOT NULL,
    state_territory character varying(250) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.addressregion_review
(
    addressregion_id bigint,
    review_id bigint,
    id bigserial NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.dealership_addressregion_review
(
    dealership_id bigint,
    addressregion_review_id bigint,
    id bigserial NOT NULL,
    PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.addressregion_review
    ADD FOREIGN KEY (addressregion_id)
    REFERENCES public.addressregion (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.addressregion_review
    ADD FOREIGN KEY (review_id)
    REFERENCES public.review (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.dealership_addressregion_review
    ADD FOREIGN KEY (dealership_id)
    REFERENCES public.dealership (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.dealership_addressregion_review
    ADD FOREIGN KEY (addressregion_review_id)
    REFERENCES public.addressregion_review (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

--Reviews
INSERT INTO review (id, review) VALUES (1, 'Integrated contextually-based open system');
INSERT INTO review (id, review) VALUES (2, 'Cross-platform well-modulated initiative');
INSERT INTO review (id, review) VALUES (3, 'Customizable attitude-oriented system engine');
INSERT INTO review (id, review) VALUES (4, 'Persevering content-based capacity');
INSERT INTO review (id, review) VALUES (5, 'Optional hybrid contingency');
INSERT INTO review (id, review) VALUES (6, 'Right-sized leading edge capability');
INSERT INTO review (id, review) VALUES (7, 'Business-focused stable initiative');
INSERT INTO review (id, review) VALUES (8, 'Right-sized regional project');
INSERT INTO review (id, review) VALUES (9, 'Face to face responsive encryption');
INSERT INTO review (id, review) VALUES (10, 'Networked 3rd generation challenge');

--State
INSERT INTO addressregion (id, state_territory) VALUES (1, 'Abruglia');
INSERT INTO addressregion (id, state_territory) VALUES (2, 'Bourgogne');
INSERT INTO addressregion (id, state_territory) VALUES (3, 'Ã‰vora');


--Dealership
INSERT INTO Dealership (id, dealership_name) values (1, 'Ruecker Inc');
INSERT INTO Dealership (id, dealership_name) values (2, 'Pfeffer, Dickinson and Douglas');
INSERT INTO Dealership (id, dealership_name) values (3, 'Johnson, Shields and Ernser');

INSERT INTO Review_AddressLocation(id, Review_id, AddressLocation_id) VALUES(1,1,1);
INSERT INTO Review_AddressLocation(id, Review_id, AddressLocation_id) VALUES(2,2,1);

INSERT INTO Dealership_Review_AddressLocation(id, Dealership_id, Review_AddressLocation_id) VALUES(1,1,1);
INSERT INTO Dealership_Review_AddressLocation(id, Dealership_id, Review_AddressLocation_id) VALUES(2,1,2);

--Joins 1
SELECT DISTINCT * FROM Dealership_Review_AddressLocation
JOIN Review_AddressLocation 
ON Dealership_Review_AddressLocation.Review_AddressLocation_id 
                            = Review_AddressLocation.AddressLocation_id
JOIN Dealership 
ON Dealership_Review_AddressLocation.Dealership_id 
                            = Dealership.id

JOIN review 
ON Review_AddressLocation.Review_id = review.id

JOIN AddressLocation 
ON Review_AddressLocation.AddressLocation_id = AddressLocation.id

WHERE Dealership.id = 1;

--Joins 2
SELECT DISTINCT dealership.dealership_name, 
                AddressLocation.stateTerritory,
                review.reviews
FROM Dealership_Review_AddressLocation
JOIN Review_AddressLocation 
ON Dealership_Review_AddressLocation.Review_AddressLocation_id 
                            = Review_AddressLocation.AddressLocation_id
JOIN Dealership 
ON Dealership_Review_AddressLocation.Dealership_id 
                            = Dealership.id

JOIN review 
ON Review_AddressLocation.Review_id = review.id

JOIN AddressLocation 
ON Review_AddressLocation.AddressLocation_id = AddressLocation.id

WHERE Dealership.id = 1;

END;